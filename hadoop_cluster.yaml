heat_template_version: ocata

parameters:
  enable_hive:
    type: boolean
    default: False
    description: Enable Hive in Hadoop cluster
  enable_spark:
    type: boolean
    default: False
    description: Enable Spark in Hadoop cluster
  enable_mahout:
    type: boolean
    default: False
    description: Enable Mahout in Hadoop cluster

  flavor:
    type: string
  image:
    type: string
  key_name:
    type: string
  private_net:
    type: string
  public_net:
    type: string
    default: ''

  slave_count:
    type: number
    label: instances count
    description: Number of instances

  sg_ports:
    type: comma_delimited_list
    default: "22,9870,9000,9864,9866,9867,9868,8088,7077,8080,9083"
conditions:
  has_public_network:
    not:
      equals:
      - {get_param: public_net}
      - ''

resources:
  ICMPrule:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: {get_resource: HadoopSecurityGroup}
      protocol: icmp
      remote_ip_prefix: 0.0.0.0/0
  HadoopSecurityGroup:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for hadoop cluster
      rules:
        repeat:
          for_each:
            <%port%>: {get_param: sg_ports}
          template:
            remote_ip_prefix: 0.0.0.0/0
            port_range_min: <%port%>
            port_range_max: <%port%>
            protocol: tcp
# Hadoop Common Config

  HadoopCommonConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: master_ip
        - name: slave_ip_list
        - name: core_site_xml
        - name: hdfs_site_xml
        - name: mapred_site_xml
        - name: yarn_site_xml
        - name: workers
        - name: etc_hosts
      group: ansible
      config: { get_file: ansible/hadoop_common.yaml}

  HadoopMasterCommonDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      input_values:
        master_ip: {get_attr: [master_server, first_address]}
        slave_ip_list: {get_attr: [slave_cluster, slave_ip]}
        core_site_xml: {get_file: ansible/templates/core-site.j2.xml}
        hdfs_site_xml: {get_file: ansible/templates/hdfs-site.j2.xml}
        mapred_site_xml: {get_file: ansible/templates/mapred-site.j2.xml}
        yarn_site_xml: {get_file: ansible/templates/yarn-site.j2.xml}
        workers: {get_file: ansible/templates/workers.j2}
        etc_hosts: {get_file: ansible/templates/etc_hosts.j2}
      config: {get_resource: HadoopCommonConfig}
      server: {get_resource: master_server}

  HadoopSlaveCommonDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      input_values:
        master_ip: {get_attr: [master_server, first_address]}
        slave_ip_list: {get_attr: [slave_cluster, slave_ip]}
        core_site_xml: {get_file: ansible/templates/core-site.j2.xml}
        hdfs_site_xml: {get_file: ansible/templates/hdfs-site.j2.xml}
        mapred_site_xml: {get_file: ansible/templates/mapred-site.j2.xml}
        yarn_site_xml: {get_file: ansible/templates/yarn-site.j2.xml}
        workers: {get_file: ansible/templates/workers.j2}
        etc_hosts: {get_file: ansible/templates/etc_hosts.j2}
      config: {get_resource: HadoopCommonConfig}
      servers: {get_attr: [slave_cluster, attributes, slave_id]}

  HadoopMasterSSHConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      outputs:
        - name: id_rsa_pub
      config: {get_file: ansible/master_sshkey.yaml}

  HadoopMasterSSHDeployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config: {get_resource: HadoopMasterSSHConfig}
      server: {get_resource: master_server}

  HadoopSlaveSSHConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
        - name: id_rsa_pub
      config: {get_file: ansible/slave_sshkey.yaml}

  HadoopSlaveSSHDeployment:
    type: OS::Heat::SoftwareDeploymentGroup
    properties:
      input_values:
        id_rsa_pub: {get_attr: [HadoopMasterSSHDeployment, id_rsa_pub]}
      config: {get_resource: HadoopSlaveSSHConfig}
      servers: {get_attr: [slave_cluster, attributes, slave_id]}

  RunHadoopConfig:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: {get_file: ansible/run_hadoop.yaml}

  RunHadoopDeployment:
    type: OS::Heat::SoftwareDeployment
    depends_on:
      - HadoopMasterCommonDeployment
      - HadoopSlaveCommonDeployment
      - HadoopMasterSSHDeployment
      - HadoopSlaveSSHDeployment
    properties:
      input_values:
        slave_ip:
           get_attr: [slave_cluster, attributes, slave_ip]
      config:
        get_resource: RunHadoopConfig
      server:
        get_resource: master_server

################### run Hadoop ####################
  slave_cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: slave_count }
      resource_def:
        type: slave.yaml
        properties:
          security_groups: {get_resource: HadoopSecurityGroup}
          slave_name:
            str_replace:
              template: '%stackname%-hadoop-slave-%index%'
              params:
                '%stackname%': {get_param: 'OS::stack_name'}
  master_server:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: '%stackname%-hadoop-master'
          params:
            '%stackname%': {get_param: 'OS::stack_name'}
      image:
        get_param: image
      flavor:
        get_param: flavor
      key_name:
        get_param: key_name
      networks:
      - port: {get_resource: server_port}
      user_data_format: SOFTWARE_CONFIG

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net }
      security_groups: [{ get_resource: HadoopSecurityGroup}]

  server_floating_ip:
    type: OS::Neutron::FloatingIP
    condition: has_public_network
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: server_port }

# Enable spark, hive, or hadoop

  EnableSpark:
    type: templates/spark.yaml
    condition: {get_param: enable_spark}
    depends_on: RunHadoopDeployment
    properties:
      server: {get_resource: master_server}

  EnableHive:
    type: templates/hive.yaml
    condition: {get_param: enable_hive}
    depends_on: RunHadoopDeployment
    properties:
      server: {get_resource: master_server}

  EnableMohout:
    type: templates/mahout.yaml
    condition: {get_param: enable_mahout}
    depends_on: RunHadoopDeployment
    properties:
      server: {get_resource: master_server}
outputs:
  master_ip:
    value: {get_attr: [master_server, first_address]}
  slave_ip:
    value: {get_attr: [slave_cluster, slave_ip]}
  slave_common_stdout:
    value: {get_attr: [HadoopSlaveCommonDeployment, deploy_stdout]}
  master_common_stdout:
    value: {get_attr: [HadoopMasterCommonDeployment, deploy_stdout]}
